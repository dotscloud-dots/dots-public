<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Tests" tests="74" errors="0" failures="0" skipped="0" time="141.139" timestamp="2025-07-16T15:52:15.007594">
<testsuite name="Stests" tests="74" errors="0" failures="0" skipped="0" time="141.104" timestamp="2025-07-16T15:52:15.041395">
<testsuite name="Agents" tests="2" errors="0" failures="0" skipped="0" time="3.172" timestamp="2025-07-16T15:52:15.042388">
<testsuite name="List Agents" tests="2" errors="0" failures="0" skipped="0" time="3.170" timestamp="2025-07-16T15:52:15.043326">
<testcase classname="Tests.Stests.Agents.List Agents" name="Test Dots CLI lists connected agents" time="2.370">
</testcase>
<testcase classname="Tests.Stests.Agents.List Agents" name="Test Dots CLI enforces agent naming convention" time="0.700">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that the Dots CLI lists connected agents"/>
</properties>
</testsuite>
</testsuite>
<testsuite name="Configs" tests="3" errors="0" failures="0" skipped="0" time="2.034" timestamp="2025-07-16T15:52:18.215054">
<testsuite name="Config File" tests="1" errors="0" failures="0" skipped="0" time="0.495" timestamp="2025-07-16T15:52:18.216548">
<testcase classname="Tests.Stests.Configs.Config File" name="Test server config file successful start-up" time="0.492">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that the configs file are read and respect the priority architecture: cli arguments, env variables and then the config files"/>
</properties>
</testsuite>
<testsuite name="Work With Configs" tests="2" errors="0" failures="0" skipped="0" time="1.536" timestamp="2025-07-16T15:52:18.712771">
<testcase classname="Tests.Stests.Configs.Work With Configs" name="Test Dots CLI get configs" time="0.712">
</testcase>
<testcase classname="Tests.Stests.Configs.Work With Configs" name="Test Dots Podman remove confgis" time="0.819">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that dotctl cli lists configs correctly."/>
</properties>
</testsuite>
</testsuite>
<testsuite name="Control Interface" tests="18" errors="0" failures="0" skipped="0" time="24.490" timestamp="2025-07-16T15:52:20.249985">
<testsuite name="Authorization" tests="12" errors="0" failures="0" skipped="0" time="19.906" timestamp="2025-07-16T15:52:20.254211">
<testcase classname="Tests.Stests.Control Interface.Authorization" name="No rules" time="1.417">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow write rule with wildcard string allows all writes" time="1.446">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow write rule with wildcard string denies all reads" time="1.426">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read rule with wildcard string denies all writes" time="2.463">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read rule with wildcard string allows all reads" time="2.471">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read write rule with wildcard string allows allow read and writes" time="1.445">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow write rule for only tags allows write to tags" time="1.401">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow write rule for only tags denies everythings execept write to tags" time="1.142">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read rule for only tags allows read from tags" time="2.456">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read rule for only tags denies everythings execept read from tags" time="1.406">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read write rule for workloads except write to simple_existing allows all read and write on workloads execept write to simple_existing" time="1.418">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Authorization" name="Allow read write rule for workloads except write to simple_existing forbids writing to simple_existing and reading whole state" time="1.408">
</testcase>
<properties>
<property name="Documentation" value="Tests the authorization of the Control Interface access from workloads."/>
</properties>
</testsuite>
<testsuite name="Control Interface" tests="6" errors="0" failures="0" skipped="0" time="4.578" timestamp="2025-07-16T15:52:40.160542">
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test Dots workload successful start-up without a Control Interface access" time="0.661">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test Dots workload restart after update without a Control Interface access" time="0.962">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test Dots workload restart after update with a Control Interface access" time="1.275">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test Control Interface closes connection when initial hello missing" time="1.401">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test workload with empty Control Interface access field mask rejected" time="0.210">
</testcase>
<testcase classname="Tests.Stests.Control Interface.Control Interface" name="Test server started with empty Control Interface access field mask fails" time="0.062">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots workloads are being restarted after having added a Control Interface."/>
</properties>
</testsuite>
<properties>
<property name="Documentation" value="Tests the control interface provided by Dots to workloads"/>
</properties>
</testsuite>
<testsuite name="Manifests" tests="11" errors="0" failures="0" skipped="0" time="14.864" timestamp="2025-07-16T15:52:44.740485">
<testsuite name="Apply Manifests" tests="11" errors="0" failures="0" skipped="0" time="14.861" timestamp="2025-07-16T15:52:44.742388">
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications showing progress via spinner" time="1.364">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications via Dots Manifest files" time="1.370">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications via Dots Manifest content through stdin" time="1.271">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specification overwriting the agent names" time="1.233">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specification defining the agent names" time="1.221">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specification without agent name" time="1.043">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications via Dots Manifest files for deletion" time="1.277">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications via Dots Manifest content through stdin for deletion" time="1.164">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specifications in Dots manifest with templated fields" time="2.815">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specification with wrong api version" time="1.047">
</testcase>
<testcase classname="Tests.Stests.Manifests.Apply Manifests" name="Test Dots apply workload specification with wrong api version format" time="1.044">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots can apply workload specifications via Dots manifest files."/>
</properties>
</testsuite>
</testsuite>
<testsuite name="Mtls" tests="5" errors="0" failures="0" skipped="0" time="7.505" timestamp="2025-07-16T15:52:59.604848">
<testsuite name="Mtls Communication" tests="5" errors="0" failures="0" skipped="0" time="7.502" timestamp="2025-07-16T15:52:59.606402">
<testcase classname="Tests.Stests.Mtls.Mtls Communication" name="Test Dots MTLS by providing PEM files via environment variables" time="2.084">
</testcase>
<testcase classname="Tests.Stests.Mtls.Mtls Communication" name="Test Dots MTLS by providing PEM files via command line arguments" time="0.814">
</testcase>
<testcase classname="Tests.Stests.Mtls.Mtls Communication" name="Test Dots MTLS by providing wrong PEM config via command line arguments" time="0.908">
</testcase>
<testcase classname="Tests.Stests.Mtls.Mtls Communication" name="Test Dots insecure mode by providing --insecure command line arguments" time="3.006">
</testcase>
<testcase classname="Tests.Stests.Mtls.Mtls Communication" name="Test Dots MTLS by providing PEM files via config files" time="0.686">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that dotctl cli lists workloads correctly."/>
</properties>
</testsuite>
</testsuite>
<testsuite name="Workloads" tests="35" errors="0" failures="0" skipped="0" time="89.034" timestamp="2025-07-16T15:53:07.110252">
<testsuite name="Create Workload Podman" tests="2" errors="0" failures="0" skipped="0" time="4.347" timestamp="2025-07-16T15:53:07.111638">
<testcase classname="Tests.Stests.Workloads.Create Workload Podman" name="Test Dots Podman create workloads" time="3.249">
</testcase>
<testcase classname="Tests.Stests.Workloads.Create Workload Podman" name="Test Dots Podman create a container with custom name" time="1.095">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots can create Podman workloads."/>
</properties>
</testsuite>
<testsuite name="Delete Workload Podman" tests="1" errors="0" failures="0" skipped="0" time="2.129" timestamp="2025-07-16T15:53:11.459760">
<testcase classname="Tests.Stests.Workloads.Delete Workload Podman" name="Test Dots Podman remove workloads" time="2.125">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots can create Podman workloads."/>
</properties>
</testsuite>
<testsuite name="Delete Workload Podman Kube" tests="1" errors="0" failures="0" skipped="0" time="1.346" timestamp="2025-07-16T15:53:13.589063">
<testcase classname="Tests.Stests.Workloads.Delete Workload Podman Kube" name="Test Dots Podman delete kube workload" time="1.342">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots can create Podman workloads."/>
</properties>
</testsuite>
<testsuite name="Device Restart With Dependencies" tests="1" errors="0" failures="0" skipped="0" time="9.711" timestamp="2025-07-16T15:53:14.935794">
<testcase classname="Tests.Stests.Workloads.Device Restart With Dependencies" name="Test Dots restarts exited workloads on device restart with considering inter-workload dependencies" time="9.707">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots creates and deletes workloads&#10;with inter-workload dependencies properly."/>
</properties>
</testsuite>
<testsuite name="Interworkload Dependencies" tests="4" errors="0" failures="0" skipped="0" time="18.476" timestamp="2025-07-16T15:53:24.647743">
<testcase classname="Tests.Stests.Workloads.Interworkload Dependencies" name="Test Dots observes the inter-workload dependencies when creating workloads" time="6.967">
</testcase>
<testcase classname="Tests.Stests.Workloads.Interworkload Dependencies" name="Test Dots observes the inter-workload dependencies when deleting workloads" time="1.676">
</testcase>
<testcase classname="Tests.Stests.Workloads.Interworkload Dependencies" name="Test Dots CLI update workload with pending delete" time="3.585">
</testcase>
<testcase classname="Tests.Stests.Workloads.Interworkload Dependencies" name="Test Dots CLI update workload with pending create" time="6.242">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots creates and deletes workloads&#10;with inter-workload dependencies properly."/>
</properties>
</testsuite>
<testsuite name="List Workloads" tests="2" errors="0" failures="0" skipped="0" time="3.940" timestamp="2025-07-16T15:53:43.125015">
<testcase classname="Tests.Stests.Workloads.List Workloads" name="Test Dots CLI get workloads" time="1.969">
</testcase>
<testcase classname="Tests.Stests.Workloads.List Workloads" name="Test Dots CLI get workloads with config files" time="1.966">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that dotctl cli lists workloads correctly."/>
</properties>
</testsuite>
<testsuite name="Reject State With Cyclic Dependencies" tests="2" errors="0" failures="0" skipped="0" time="2.302" timestamp="2025-07-16T15:53:47.065962">
<testcase classname="Tests.Stests.Workloads.Reject State With Cyclic Dependencies" name="Test Dots reject startup config with cyclic interworkload dependencies" time="0.581">
</testcase>
<testcase classname="Tests.Stests.Workloads.Reject State With Cyclic Dependencies" name="Test Dots CLI update state with cycle in interworkload dependencies is rejected by Dots server" time="1.716">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots rejects a state with a cycle in the interworkload dependencies config."/>
</properties>
</testsuite>
<testsuite name="Restart Handling Podman" tests="2" errors="0" failures="0" skipped="0" time="12.089" timestamp="2025-07-16T15:53:49.368561">
<testcase classname="Tests.Stests.Workloads.Restart Handling Podman" name="Test Dots restarts workloads with restart policy ALWAYS." time="5.933">
</testcase>
<testcase classname="Tests.Stests.Workloads.Restart Handling Podman" name="Test Dots restarts workloads with restart policy ON_FAILURE." time="6.151">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots creates and deletes workloads&#10;with inter-workload dependencies properly."/>
</properties>
</testsuite>
<testsuite name="Retry Creation Of Workload Podman" tests="3" errors="0" failures="0" skipped="0" time="10.801" timestamp="2025-07-16T15:54:01.458308">
<testcase classname="Tests.Stests.Workloads.Retry Creation Of Workload Podman" name="Test Dots Podman retry creation of a workload on creation failure" time="1.737">
</testcase>
<testcase classname="Tests.Stests.Workloads.Retry Creation Of Workload Podman" name="Test Dots Podman retry creation of a workload on creation failure intercepted by update" time="6.193">
</testcase>
<testcase classname="Tests.Stests.Workloads.Retry Creation Of Workload Podman" name="Test Dots Podman retry creation of a workload on creation failure intercepted by delete" time="2.867">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that restart behavior on failing create of workload works correctly"/>
</properties>
</testsuite>
<testsuite name="State Operations With Field Mask" tests="1" errors="0" failures="0" skipped="0" time="1.206" timestamp="2025-07-16T15:54:12.260145">
<testcase classname="Tests.Stests.Workloads.State Operations With Field Mask" name="Test Dots CLI update workload" time="1.202">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that dotctl cli properly supports field mask operations with state commands"/>
</properties>
</testsuite>
<testsuite name="Update Workload Podman" tests="7" errors="0" failures="0" skipped="0" time="7.709" timestamp="2025-07-16T15:54:13.466804">
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots CLI update workload" time="1.748">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman update workload from empty state" time="0.496">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman Update workload with invalid api version" time="1.335">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman Update workload with invalid workload name" time="1.031">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman Update workload with lengthy workload name" time="1.031">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman Update workload with invalid agent name" time="1.031">
</testcase>
<testcase classname="Tests.Stests.Workloads.Update Workload Podman" name="Test Dots Podman Update workload with missing api version" time="1.031">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that dotctl cli updates workloads correctly&#10;by adapting the portmapping from the host port 8081 to host port 8082."/>
</properties>
</testsuite>
<testsuite name="Workload Configs Podman" tests="5" errors="0" failures="0" skipped="0" time="4.939" timestamp="2025-07-16T15:54:21.176729">
<testcase classname="Tests.Stests.Workloads.Workload Configs Podman" name="Test Dots start up with templated Dots manifest and update state with updated config item" time="1.782">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Configs Podman" name="Test Dots update configs with invalid config item key" time="0.851">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Configs Podman" name="Test Dots update workload with invalid config alias" time="0.872">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Configs Podman" name="Test Dots update workload with invalid config reference key" time="0.847">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Configs Podman" name="Test Dots start up fails with invalid templated Dots manifest" time="0.581">
</testcase>
<properties>
<property name="Documentation" value="Test of different cases related to workloads and their rendered configuration."/>
</properties>
</testsuite>
<testsuite name="Workload Files" tests="4" errors="0" failures="0" skipped="0" time="10.027" timestamp="2025-07-16T15:54:26.116407">
<testcase classname="Tests.Stests.Workloads.Workload Files" name="Test Dots starts manifest with workload files assigned to workloads" time="1.638">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Files" name="Test Dots updates a workload upon update of its workload file content" time="1.769">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Files" name="Test Dots updates a workload upon adding additional workload files" time="5.520">
</testcase>
<testcase classname="Tests.Stests.Workloads.Workload Files" name="Test Dots rejects unsupported workload files for workloads using podman-kube runtime" time="1.094">
</testcase>
<properties>
<property name="Documentation" value="Tests to verify that Dots creates and mounts workload files&#10;assigned to workloads."/>
</properties>
</testsuite>
</testsuite>
</testsuite>
</testsuite>
